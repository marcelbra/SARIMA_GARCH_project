s
substring(s, 1, length(s)-1)
substring(s, 1, length(s)-2)
substring(s, 2, 4)
substring(s, 1, 4)
substring(s, 1, length(s))
substring(s, 1, length(s)-5)
substring(s, 1, length(s)+5)
s
substring("EDP RENOVAVEISprice.xlsx", 1, length("price.xlsx")+2)
substring("EDP RENOVAVEISprice.xlsx", 1, length("price.xlsx")+10)
substring("EDP RENOVAVEISprice.xlsx", 1, length("price.xlsx")+15)
substring("EDP RENOVAVEISprice.xlsx", 1, length("price.xlsx")+1)
substring("EDP RENOVAVEISprice.xlsx", 1, length("price.xlsx")+12)
substring("EDP RENOVAVEISprice.xlsx", 1, length("price.xlsx")+13)
substring("GALP ENERGIA-NOMprice.xlsx"", 1, length("price.xlsx")+13)
substring("GALP ENERGIA-NOMprice.xlsx, 1, length("price.xlsx")+13)
substring("GALP ENERGIA-NOMprice.xlsx", 1, length("price.xlsx")+13)
s <- "GALP ENERGIA-NOMprice.xlsx"
substring(s, 1, length(s)+10)
substring(s, 1, length(s)+5)
substring(s, 1, length(s)+2)
substring(s, 1, length(s)+12)
substring(s, 1, length(s)+15)
substring(s, 1, length(s)+16)
substring(s, 1, length(s)+15)
length(s)
substring(s, 1, nchar(s))
substring(s, 1, nchar(s)-6)
substring(s, 1, nchar(s)-10)
s <- "GALP ENERGIA-NOMprice.xlsx"
substring(s, 1, nchar(s)-10)
s <- names[[1]]
substring(s, 1, nchar(s)-10)
# Initial data plot
plot(0, 0, xlim = c(0,N), ylim = c(min(log_returns),max(log_returns)),
type = "n", main = sprintf("Log returns of %s", substring(name, 1, nchar(name)-10)))
lines(1:length(log_returns), log_returns) # Returns
# Initial data plot
plot(0, 0, xlim = c(0,N), ylim = c(min(log_returns),max(log_returns)),
# Initial data plot
plot(0, 0, xlim = c(0,N), ylim = c(min(log_returns),max(log_returns)),
type = "n", main = sprintf(substring(name, 1, nchar(name)-10)),
xlab="Time in days", ylab="Log returns in percent")
lines(1:length(log_returns), log_returns) # Returns
# Initial data plot
plot(0, 0, xlim = c(0,N), ylim = c(min(log_returns),max(log_returns)),
type = "n",
main = "sprintf(substring(name, 1, nchar(name)-10))",
xlab="Time in days", ylab="Log returns in percent")
# Initial data plot
plot(0, 0, xlim = c(0,N), ylim = c(min(log_returns),max(log_returns)),
type = "n",
main = sprintf(substring(name, 1, nchar(name)-10)),
xlab="Time in days", ylab="Log returns in percent")
lines(1:length(log_returns), log_returns) # Returns
mean_vec <- rep(mean(log_returns), N)
std_vec <- rep(sd(log_returns), N)
lines(1:length(mean_vec), mean_vec, col = "#0000FF") # Mean
lines(1:length(std_vec), std_vec, col = "#FF0000") # Std
lines(1:length(std_vec), std_vec * -1, col = "#FF0000")
plot_data <- function(log_returns, name) {
# Plots the time series of the given log returns with mean and
# standard deviation
plot(0, 0, xlim = c(0,N), ylim = c(min(log_returns),max(log_returns)),
type = "n",
main = sprintf(substring(name, 1, nchar(name)-10)),
xlab="Time in days", ylab="Log returns in percent")
lines(1:length(log_returns), log_returns) # Returns
mean_vec <- rep(mean(log_returns), N)
std_vec <- rep(sd(log_returns), N)
lines(1:length(mean_vec), mean_vec, col = "#0000FF") # Mean
lines(1:length(std_vec), std_vec, col = "#FF0000") # Std
lines(1:length(std_vec), std_vec * -1, col = "#FF0000")
}
plot_data(log_returns, name)
current <- 2
name <- names[[current]]
data <- read_excel(name, skip = 3)
log_returns <- diff(log(data[["Close"]]))
N <- length(log_returns)
"a" + price.xlsx
paste("a", price.xlsx)
paste("a", "price.xlsx)
paste("a", "price.xlsx")
paste("a", "price.xlsx", sep=NULL)
paste("a", "price.xlsx", sep="")
N <- length(diff(log(read_excel(names[[1]], skip = 3)[["Close"]])))
N
length(diff(log(read_excel(names[[1]], skip = 3)[["Close"]])))
data <- data.frame(a = 1:N)
data
data <- data.frame(a = 1:N)
for (name in names) {
data["name"] <- read_excel(name)
}
data <- data.frame(a = 1:N)
for (name in names) {
data["name"] <- diff(log(read_excel(name, skip = 3)[["Close"]]))
}
N <- length(diff(log(read_excel(names[[1]], skip = 3)[["Close"]])))
N
N <- length(diff(log(read_excel(names[[2]], skip = 3)[["Close"]])))
N
N <- length(diff(log(read_excel(names[[3]], skip = 3)[["Close"]])))
N
N <- length(diff(log(read_excel(names[[4]], skip = 3)[["Close"]])))
N
N <- length(diff(log(read_excel(names[[2]], skip = 3)[["Close"]])))
data <- data.frame(a = 1:N)
for (name in names) {
data["name"] <- diff(log(read_excel(name, skip = 3)[["Close"]]))
}
names <- c("NOSSGPS", "MOTA ENGIL", "GALP ENERGIA-NOMx", "EDP RENOVAVEIS")
N <- length(diff(log(read_excel(names[[2]], skip = 3)[["Close"]])))
data <- data.frame(a = 1:N)
for (name in names) {
data["name"] <- diff(log(read_excel(name, skip = 3)[["Close"]]))
}
data <- data.frame(a = 1:N)
for (name in names) {
data["name"] <- diff(log(read_excel(parse(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
data <- data.frame(a = 1:N)
for (name in names) {
data["name"] <- diff(log(read_excel(parse(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
name
diff(log(read_excel(parse(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
data <- data.frame(a = 1:N)
for (name in names) {
data["name"] <- diff(log(read_excel(paste(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
data
names
data <- data.frame(a = 1:N)
data <- data.frame(a = 1:N)
for (name in names) {
data[name] <- diff(log(read_excel(paste(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
names <- c("NOSSGPS", "MOTA ENGIL", "GALP ENERGIA-NOM", "EDP RENOVAVEIS")
N <- length(diff(log(read_excel(names[[2]], skip = 3)[["Close"]])))
data <- data.frame(a = 1:N)
for (name in names) {
data[name] <- diff(log(read_excel(paste(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
data
log_returns <- data.frame(a = 1:N)
for (name in names) {
data[name] <- diff(log(read_excel(paste(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
log_returns <- data.frame(a = 1:N)
for (name in names) {
log_returns[name] <- diff(log(read_excel(paste(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
seq(2, NA)
seq(2, 2)
seq(2, 3)
rep(2, 3)
rep(NA, 3)
get_log_returns <- function(names) {
N <- length(diff(log(read_excel(names[[1]], skip = 3)[["Close"]])))
log_returns <- data.frame(a = 1:N)
for (name in names) {
log_returns[name] <- diff(log(read_excel(paste(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
log_returns
}
log_returns <- get_log_returns(names)
get_log_returns <- function(names) {
N <- length(diff(log(read_excel(paste(names[[1]],"price.xlsx", sep=""), skip = 3)[["Close"]])))
log_returns <- data.frame(a = 1:N)
for (name in names) {
log_returns[name] <- diff(log(read_excel(paste(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
log_returns
}
log_returns <- get_log_returns(names)
N <- length(read_excel(paste(names[[1]],"price.xlsx", sep=""), skip = 3))
N
N <- length(read_excel(paste(names[[1]],"price.xlsx", sep="")[["Close"]], skip = 3))
N <- length(read_excel(paste(names[[1]],"price.xlsx", sep=""), skip = 3)[["Close"]])
N
N <- length(read_excel(paste(names[[1]],"price.xlsx", sep=""))[["Close"]])
N
length(read_excel(paste(names[[1]],"price.xlsx", sep=""))[["Close"]])
N <- length(read_excel(paste(names[[1]],"price.xlsx", sep=""), skip = 3)[["Close"]])
N
length(read_excel(paste(names[[1]],"price.xlsx", sep=""), skip = 3)[["Close"]]) - 1
get_log_returns <- function(names) {
N <- length(read_excel(paste(names[[1]],"price.xlsx", sep=""), skip = 3)) -1
log_returns <- data.frame(a = 1:N)
for (name in names) {
log_returns[name] <- diff(log(read_excel(paste(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
log_returns
}
log_returns <- get_log_returns(names)
get_log_returns <- function(names) {
N <- length(read_excel(paste(names[[1]],"price.xlsx", sep=""), skip = 3)[["Close"]]) - 1
log_returns <- data.frame(a = 1:N)
for (name in names) {
log_returns[name] <- diff(log(read_excel(paste(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
log_returns
}
log_returns <- get_log_returns(names)
plot_data <- function(log_return, name) {
# Plots the time series of the given log returns with mean and standard deviation
plot(0, 0, xlim = c(0,N), ylim = c(min(log_return),max(log_return)),
type = "n",
main = sprintf(substring(name, 1, nchar(name)-10)),
xlab="Time in days", ylab="Log returns in percent")
lines(1:length(log_return), log_return) # Returns
mean_vec <- rep(mean(log_return), N)
std_vec <- rep(sd(log_return), N)
lines(1:length(mean_vec), mean_vec, col = "#0000FF") # Mean
lines(1:length(std_vec), std_vec, col = "#FF0000") # Std
lines(1:length(std_vec), std_vec * -1, col = "#FF0000")
}
namme
name
current <- 1
plot_data(log_return, name[[current]])
name <- names[[current]]
name
log_returns
log_returns[[name]]
plot_data <- function(log_returns, name) {
# Plots the time series of the given log returns with mean and standard deviation
plot(0, 0, xlim = c(0,N), ylim = c(min(log_returns[[name]]),max(log_returns[[name]])),
type = "n",
main = sprintf(substring(name, 1, nchar(name)-10)),
xlab="Time in days", ylab="Log returns in percent")
lines(1:length(log_returns[[name]]), log_returns[[name]]) # Returns
mean_vec <- rep(mean(log_returns[[name]]), N)
std_vec <- rep(sd(log_returns[[name]]), N)
lines(1:length(mean_vec), mean_vec, col = "#0000FF") # Mean
lines(1:length(std_vec), std_vec, col = "#FF0000") # Std
lines(1:length(std_vec), std_vec * -1, col = "#FF0000")
}
current <- 1
name <- names[[current]]
plot_data(log_returns, name)
plot_data <- function(log_returns, name) {
# Plots the time series of the given log returns with mean and standard deviation
plot(0, 0, xlim = c(0,N), ylim = c(min(log_returns[[name]]),max(log_returns[[name]])),
type = "n",  main = name, xlab="Time in days", ylab="Log returns in percent")
lines(1:length(log_returns[[name]]), log_returns[[name]]) # Returns
mean_vec <- rep(mean(log_returns[[name]]), N)
std_vec <- rep(sd(log_returns[[name]]), N)
lines(1:length(mean_vec), mean_vec, col = "#0000FF") # Mean
lines(1:length(std_vec), std_vec, col = "#FF0000") # Std
lines(1:length(std_vec), std_vec * -1, col = "#FF0000")
}
current <- 1
name <- names[[current]]
plot_data(log_returns, name)
acf(log_return, 40)
log_return <- log_returns[[name]]
# Plot ACF of log returns and squared log returns
plot_data(log_returns, name)
acf(log_return, 40)
plot(acf(log_return, 40), main = sprintf("ACF of %s", name))
plot(acf(log_return, 40), main = sprintf("ACF of %s's log-returns", name))
plot(acf(log_return**2, 40), main = sprintf("ACF of %s's squared log-returns", name))
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1), data = log_return, trace = FALSE)
summary(model)
test(residuals(model, standardize=TRUE))
plot(test(residuals(model, standardize=TRUE)), "Test")
name
# Set parameter for current stock series
current <- 1
# Get current stock series
name <- names[[current]]
log_return <- log_returns[[name]]
name
# Plot ACF of log returns and squared log returns
plot_data(log_returns, name)
plot(acf(log_return, 40), main = sprintf("ACF of %s's log-returns", name))
plot(acf(log_return**2, 40), main = sprintf("ACF of %s's squared log-returns", name))
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1), data = log_return, trace = FALSE)
summary(model)
test(residuals(model, standardize=TRUE))
# Set parameter for current stock series
current <- 2
# Get current stock series
name <- names[[current]]
log_return <- log_returns[[name]]
name
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1), data = log_return, trace = FALSE)
summary(model)
test(residuals(model, standardize=TRUE))
# Set parameter for current stock series
current <- 3
# Get current stock series
name <- names[[current]]
log_return <- log_returns[[name]]
name
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1), data = log_return, trace = FALSE)
summary(model)
test(residuals(model, standardize=TRUE))
# Set parameter for current stock series
current <- 4
# Get current stock series
name <- names[[current]]
log_return <- log_returns[[name]]
name
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1), data = log_return, trace = FALSE)
summary(model)
test(residuals(model, standardize=TRUE))
names <- c("NOVABASESGPS", "NOSSGPS", "MOTA ENGIL", "GALP ENERGIA-NOM", "EDP RENOVAVEIS")
get_log_returns <- function(names) {
N <- length(read_excel(paste(names[[1]],"price.xlsx", sep=""), skip = 3)[["Close"]]) - 1
log_returns <- data.frame(a = 1:N)
for (name in names) {
log_returns[name] <- diff(log(read_excel(paste(name,"price.xlsx", sep=""), skip = 3)[["Close"]]))
}
log_returns
}
log_returns <- get_log_returns(names)
plot_data <- function(log_returns, name) {
# Plots the time series of the given log returns with mean and standard deviation
plot(0, 0, xlim = c(0,N), ylim = c(min(log_returns[[name]]),max(log_returns[[name]])),
type = "n",  main = name, xlab="Time in days", ylab="Log returns in percent")
lines(1:length(log_returns[[name]]), log_returns[[name]]) # Returns
mean_vec <- rep(mean(log_returns[[name]]), N)
std_vec <- rep(sd(log_returns[[name]]), N)
lines(1:length(mean_vec), mean_vec, col = "#0000FF") # Mean
lines(1:length(std_vec), std_vec, col = "#FF0000") # Std
lines(1:length(std_vec), std_vec * -1, col = "#FF0000")
}
# Set parameter for current stock series
current <- 4
# Set parameter for current stock series
current <- 1
# Get current stock series
name <- names[[current]]
log_return <- log_returns[[name]]
name
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1), data = log_return, trace = FALSE)
# summary(model)
test(residuals(model, standardize=TRUE))
name
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1),
data = diff(log(read_excel("NOVABASESGPSprice2.xlsx"), skip = 3)[["Close"]]),
trace = FALSE)
read_excel("NOVABASESGPSprice2.xlsx")
read_excel("NOVABASESGPSprice2.xlsx"), skip = 3)[["Close"]]
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1),
data = diff(log(read_excel("NOVABASESGPSprice2.xlsx", skip = 3)[["Close"]])),
trace = FALSE)
# summary(model)
test(residuals(model, standardize=TRUE))
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1),
data = diff(log(read_excel("NOVABASESGPSprice.xlsx", skip = 3)[["Close"]])),
trace = FALSE)
# summary(model)
test(residuals(model, standardize=TRUE))
# summary(model)
test(residuals(model, standardize=TRUE))
# Set parameter for current stock series
current <- 5
# Get current stock series
name <- names[[current]]
log_return <- log_returns[[name]]
name
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1), data = log_return, trace = FALSE)
# summary(model)
test(residuals(model, standardize=TRUE))
install.packages(dtw)
install.packages("dtw)
""
install.packages("dtw")
n <- 10
s <- sample(1:100, n)
s
log_return
length(log_return)
sc <- log_return
n <- length(log_return)
s <- sample(1:100, n)
s <- sample(1:100, n)
idx <- c(s, 100+s, 200+s, 300+s, 400+s, 500+s)
sc <- log_return
n <- length(log_return)
s <- sample(1:100, n)
# Plot ACF of log returns and squared log returns
plot_data(log_returns, name)
plot(acf(log_return, 40), main = sprintf("ACF of %s's log-returns", name))
plot(acf(log_return**2, 40), main = sprintf("ACF of %s's squared log-returns", name))
# Plot ACF of log returns and squared log returns
plot_data(log_returns, name)
# Plot ACF of log returns and squared log returns
# plot_data(log_returns, name)
# plot(acf(log_return, 40), main = sprintf("ACF of %s's log-returns", name))
# plot(acf(log_return**2, 40), main = sprintf("ACF of %s's squared log-returns", name))
plot_data(log_returns)
# Plot ACF of log returns and squared log returns
# plot_data(log_returns, name)
# plot(acf(log_return, 40), main = sprintf("ACF of %s's log-returns", name))
# plot(acf(log_return**2, 40), main = sprintf("ACF of %s's squared log-returns", name))
plot_data(log_returns, name)
acf(log_return, 40)#, main = sprintf("ACF of %s's log-returns", name))
acf(log_return**2, 40)#, main = sprintf("ACF of %s's squared log-returns", name))
setwd("/Users/marcelbraasch/Desktop/TimeSeriesProject/Data/Assets")
setwd("/Users/marcelbraasch/Desktop/TimeSeriesProject/Assets")
# Plot ACF of log returns and squared log returns
setwd("/Users/marcelbraasch/Desktop/TimeSeriesProject/Assets")
plot_data(log_returns, name)
png(sprintf("plot_%s.png", name))
dev.off()
sprintf("plot_%s.png", name)
png(sprintf("plot_%s.png", name))
plot_data(log_returns, name)
dev.off()
for (name in names) {
png(sprintf("plot_%s.png", name))
plot_data(log_returns, name)
dev.off()
png(sprintf("acf_return_%s.png", name))
plot(acf(log_return, 40), main = sprintf("ACF of %s's log-returns", name))
dev.off()
png(sprintf("acf_squared_return_%s.png", name))
plot(acf(log_return**2, 40), main = sprintf("ACF of %s's squared log-returns", name))
dev.off()
}
plot_data <- function(log_returns, name) {
# Plots the time series of the given log returns with mean and standard deviation
plot(0, 0, xlim = c(0,N), ylim = c(min(log_returns[[name]]),max(log_returns[[name]])),
type = "n",  main = "", xlab="Time in days", ylab="Log returns in percent")
lines(1:length(log_returns[[name]]), log_returns[[name]]) # Returns
mean_vec <- rep(mean(log_returns[[name]]), N)
std_vec <- rep(sd(log_returns[[name]]), N)
lines(1:length(mean_vec), mean_vec, col = "#0000FF") # Mean
lines(1:length(std_vec), std_vec, col = "#FF0000") # Std
lines(1:length(std_vec), std_vec * -1, col = "#FF0000")
}
for (name in names) {
png(sprintf("plot_%s.png", name))
plot_data(log_returns, name)
dev.off()
png(sprintf("acf_return_%s.png", name))
plot(acf(log_return, 40), main = sprintf("ACF of %s's log-returns", name))
dev.off()
png(sprintf("acf_squared_return_%s.png", name))
plot(acf(log_return**2, 40), main = "")# sprintf("ACF of %s's squared log-returns", name))
dev.off()
}
for (name in names) {
png(sprintf("plot_%s.png", name))
plot_data(log_returns, name)
dev.off()
png(sprintf("acf_return_%s.png", name))
plot(acf(log_return, 40), main = name)
dev.off()
png(sprintf("acf_squared_return_%s.png", name))
plot(acf(log_return**2, 40), main = "")# sprintf("ACF of %s's squared log-returns", name))
dev.off()
}
names
# Plot ACF of log returns and squared log returns
setwd("/Users/marcelbraasch/Desktop/TimeSeriesProject/Data")
# Set parameter for current stock series
current <- 1
# Get current stock series
name <- names[[current]]
log_return <- log_returns[[name]]
name
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1), data = log_return, trace = FALSE)
# summary(model)
test(residuals(model, standardize=TRUE))
summary(model)
#summary(model)
test(residuals(model, standardize=TRUE))
# Set parameter for current stock series
run_tests <- function(number) {
name <- names[[number]]
log_return <- log_returns[[name]]
name
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1), data = log_return, trace = FALSE)
#summary(model)
test(residuals(model, standardize=TRUE))
}
run_tests(2)
# Set parameter for current stock series
run_tests <- function(number) {
name <- names[[number]]
log_return <- log_returns[[name]]
name
# Fit the final model and do tests
model <- garchFit(formula = ~garch(1,1), data = log_return, trace = FALSE)
#summary(model)
test(residuals(model, standardize=TRUE))
print(name)
}
run_tests(2)
run_tests(3)
run_tests(4)
run_tests(5)
